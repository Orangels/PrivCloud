{"version":3,"sources":["../static/js/16.9572840f.chunk.js","components/Charts/Student_Chart_server.js"],"names":["webpackJsonp","1373","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_bizcharts__","__WEBPACK_IMPORTED_MODULE_2__antv_data_set__","__WEBPACK_IMPORTED_MODULE_2__antv_data_set___default","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Student_Chart_server","_React$Component","this","_this","getPrototypeOf","state","fields","chart_data","max_gpu","chartIns","_props","data","cols","x_name","y_name","setState","nextProps","nextContext","console","log","_this2","timestamp","0","1","2","3","temperature","dataSource","ds","a","dv","createView","source","transform","type","createElement","height","scale","forceFit","onGetG2Instance","chart","custom","allowAllCanceled","items","marker","symbol","stroke","radius","lineWidth","onClick","ev","item","checked","geoms","getAllGeoms","geom","getYScale","alias","show","hide","name","label","offset","formatter","val","Math","round","text","index","visible","position","color","size","tooltip","age","Component"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YAS8f,SAASC,GAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAuC,QAASC,GAA2BC,EAAKC,GAAM,IAAID,EAAM,KAAM,IAAIE,gBAAe,4DAA8D,QAAOD,GAAqB,iBAAPA,IAA+B,mBAAPA,GAAwBD,EAALC,EAAW,QAASE,GAAUC,EAASC,GAAY,GAAuB,mBAAbA,IAAsC,OAAbA,EAAmB,KAAM,IAAIP,WAAU,iEAAkEO,GAAaD,GAASE,UAAUC,OAAOC,OAAOH,GAAYA,EAAWC,WAAWG,aAAaC,MAAMN,EAASO,YAAW,EAAMC,UAAS,EAAKC,cAAa,KAAWR,IAAWE,OAAOO,eAAeP,OAAOO,eAAeV,EAASC,GAAYD,EAASW,UAAUV,GARhyCE,OAAOS,eAAevB,EAAqB,cAAgBiB,OAAO,GAC7C,IAAIO,GAAsCvB,EAAoB,GAC1DwB,EAA8CxB,EAAoByB,EAAEF,GACpEG,EAA0C1B,EAAoB,MAE9D2B,GADkD3B,EAAoByB,EAAEC,GACzB1B,EAAoB,OACnE4B,EAAuD5B,EAAoByB,EAAEE,GAElGE,GADmE7B,EAAoB,MAC1E,WAAW,QAAS8B,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWlB,WAAWkB,EAAWlB,aAAY,EAAMkB,EAAWhB,cAAa,EAAQ,SAAUgB,KAAWA,EAAWjB,UAAS,GAAKL,OAAOS,eAAeS,EAAOI,EAAWC,IAAID,IAAc,MAAO,UAAShC,EAAYkC,EAAWC,GAAuI,MAAvHD,IAAWP,EAAiB3B,EAAYS,UAAUyB,GAAeC,GAAYR,EAAiB3B,EAAYmC,GAAoBnC,OCWteoC,EDNmB,SAASC,GCQ9B,QAAAD,GAAYP,GAAO/B,EAAAwC,KAAAF,EAAA,IAAAG,GAAArC,EAAAoC,MAAAF,EAAAlB,WAAAR,OAAA8B,eAAAJ,IAAAhC,KAAAkC,KACTT,GADS,OAGfU,GAAKE,OAEDC,UACAC,cACAC,QAAS,MACTC,SAAS,MAREN,EDqBb,MA7B0CjC,GAAU8B,EAAqBC,GAGhBX,EAAaU,IAAuBH,IAAI,qBAAqBpB,MAAM,WCoB7G,GAAAiC,GAC4BR,KAAKT,MAA5CkB,EADWD,EACXC,KAAMC,EADKF,EACLE,KAAuBN,GADlBI,EACCG,OADDH,EACSI,OADTJ,EACkBJ,OACnCK,GAAOA,MACPC,EAAOA,MACPN,EAASA,IAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChDJ,KAAKa,UACDJ,OACAC,OACAN,cD5BmZT,IAAI,4BAA4BpB,MAAM,SCgCvauC,EAAWC,GAAa,GACxCN,GAAuBK,EAAvBL,KAAMC,EAAiBI,EAAjBJ,KAAMN,EAAWU,EAAXV,MAClBY,SAAQC,IAAIR,GACZA,EAAOA,MACPC,EAAOA,MACPN,EAASA,IAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChDJ,KAAKa,UACDJ,OACAC,OACAN,cDzC6sBT,IAAI,SAASpB,MAAM,WC6C/tB,GAAA2C,GAAAlB,KAECS,IAEEU,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAGZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAEZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAEZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAEZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAEZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAEZL,UAAU,QACVC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,EAAE,IACFC,YAAY,KAmBhBC,GAJSzB,KAAKG,MAAMG,QAIPN,KAAKG,MAAMM,MAAQA,GAC9BiB,EAAK,GAAIvC,GAAAwC,EACTC,EAAKF,EAAGG,aAAaC,OAAOL,EASlC,OARAG,GAAGG,WACCC,KAAM,OACN5B,OAAQJ,KAAKG,MAAMC,OACnBT,IAAK,MACLpB,MAAO,UAKPQ,EAAA4C,EAAAM,cAAA,WACIlD,EAAA4C,EAAAM,cAAChD,EAAA,OAAMiD,OAAQ,IAAMzB,KAAMmB,EAAIO,MAAOnC,KAAKG,MAAMO,KAAM0B,UAAA,EAChDC,gBAAiB,SAAAC,GAGbpB,EAAKL,UACDN,SAAS+B,MAIpBvD,EAAA4C,EAAAM,cAAChD,EAAA,QACGsD,QAAQ,EACRC,kBAAkB,EAClBC,QAEQlE,MAAO,uCACPmE,QACIC,OAAQ,SACRC,OAAQ,UACRC,OAAQ,EACRC,UAAW,KAIfvE,MAAO,wBACPmE,QACIC,OAAQ,SACRC,OAAQ,UACRC,OAAQ,EACRC,UAAW,KAIfvE,MAAO,eACPmE,QACIC,OAAQ,SACRC,OAAQ,UACRC,OAAQ,EACRC,UAAW,KAKvBC,QAAS,SAAAC,GAOL,IAAK,GANCC,GAAOD,EAAGC,KACV1E,EAAQ0E,EAAK1E,MACb2E,EAAUF,EAAGE,QAEbC,EAAQjC,EAAKf,MAAMI,SAAS6C,cAEzB5D,EAAI,EAAGA,EAAI2D,EAAM1D,OAAQD,IAAK,CACnC,GAAM6D,GAAOF,EAAM3D,EASf6D,GAAKC,YAAYC,QAAUhF,IACvB2E,EACAG,EAAKG,OAELH,EAAKI,YAezB1E,EAAA4C,EAAAM,cAAChD,EAAA,MACGyE,KAAK,YACLC,OACIC,OAAO,EACPC,UAAW,SAASC,GAChB,MAAOC,MAAKC,MAAMF,EAAM,MAAQ,UAK5C/E,EAAA4C,EAAAM,cAAChD,EAAA,MACGyE,KAAK,cACLC,OACIC,OAAO,EACPC,UAFG,SAEOI,EAAMhB,EAAMiB,GAClB,MAAUD,GAAV,aAKZlF,EAAA4C,EAAAM,cAAChD,EAAA,MACGyE,KAAK,kBACLS,SAAS,IAEbpF,EAAA4C,EAAAM,cAAChD,EAAA,MACGyE,KAAK,QAMLS,SAAS,IAEbpF,EAAA4C,EAAAM,cAAChD,EAAA,QAAD,MACAF,EAAA4C,EAAAM,cAAChD,EAAA,MAAK+C,KAAK,OAAOoC,SAAS,sBAAsBC,MAAM,UAAUC,KAAM,EACjEC,SACI,yBACA,SAACC,EAAKjG,GACF,OACImF,KAAM,2BACNnF,MAAUA,EAAV,WAIlBQ,EAAA4C,EAAAM,cAAChD,EAAA,MAAK+C,KAAK,OAAOoC,SAAS,wBAAwBC,MAAM,UAAUC,KAAM,EACnEC,SACI,2BACA,SAACC,EAAKjG,GACF,OACImF,KAAM,eACNnF,MAAUA,EAAV,cAIlBQ,EAAA4C,EAAAM,cAAChD,EAAA,MAAK+C,KAAK,OAAOoC,SAAS,4BAA4BC,MAAM,UAAUC,KAAM,EACvEC,SACI,+BACA,SAACC,EAAKjG,GACF,OACImF,KAAM,yBACNnF,MAAUA,EAAV,SAKlBQ,EAAA4C,EAAAM,cAAChD,EAAA,MACG+C,KAAK,gBACLoC,SAAS,kBAETC,OACI,OAEC,gBAELE,SACI,YACA,SAACC,EAAKjG,GACF,OACImF,KAASc,EAAT,SACAjG,MAAUA,EAAV,eDpQnBuB,GCvBkBf,EAAA4C,EAAM8C,UA2SzCnH,GAAA","file":"static/js/16.9572840f.chunk.js","sourcesContent":["webpackJsonp([16],{\n\n/***/ 1373:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_bizcharts__ = __webpack_require__(1076);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_bizcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_bizcharts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__antv_data_set__ = __webpack_require__(1154);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__antv_data_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__antv_data_set__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__chart_config__ = __webpack_require__(1077);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}// let chartIns = null;\n//\n// const getG2Instance = (chart) => {\n//     chartIns = chart;\n// };\nvar Student_Chart_server=function(_React$Component){_inherits(Student_Chart_server,_React$Component);// 构造\nfunction Student_Chart_server(props){_classCallCheck(this,Student_Chart_server);// 初始状态\nvar _this=_possibleConstructorReturn(this,(Student_Chart_server.__proto__||Object.getPrototypeOf(Student_Chart_server)).call(this,props));_this.state={// fields : [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\nfields:[],chart_data:[],max_gpu:12196,chartIns:null};return _this;}_createClass(Student_Chart_server,[{key:\"componentWillMount\",value:function componentWillMount(){var _props=this.props,data=_props.data,cols=_props.cols,x_name=_props.x_name,y_name=_props.y_name,fields=_props.fields;data=data||[];cols=cols||{};fields=fields||[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"];this.setState({data:data,cols:cols,fields:fields});}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps,nextContext){var data=nextProps.data,cols=nextProps.cols,fields=nextProps.fields;console.log(data);data=data||[];cols=cols||{};fields=fields||[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"];this.setState({data:data,cols:cols,fields:fields});}},{key:\"render\",value:function render(){var _this2=this;var data=[{timestamp:\"12-13\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-14\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-15\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-16\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-17\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-18\",0:1000,1:1000,2:1000,3:1000,temperature:50},{timestamp:\"12-19\",0:1000,1:1000,2:1000,3:1000,temperature:50}];var cols={// value: {\n//     tickInterval: 1000000\n// }\ntemperature:{type:'linear',min:0},value:{alias:'显存占用',min:0,max:this.state.max_gpu}};var dataSource=this.state.data||data;var ds=new __WEBPACK_IMPORTED_MODULE_2__antv_data_set___default.a();var dv=ds.createView().source(dataSource);dv.transform({type:\"fold\",fields:this.state.fields,key:\"gpu\",value:\"value\"});// let chartIns = null;\nreturn __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\"div\",null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Chart\"],{height:400,data:dv,scale:this.state.cols,forceFit:true,onGetG2Instance:function onGetG2Instance(chart){// chartIns = chart;\n// console.log(chartIns)\n_this2.setState({chartIns:chart});}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Legend\"],{custom:true,allowAllCanceled:true,items:[{value:\"平均显存占用\",marker:{symbol:\"hyphen\",stroke:\"#FA4E21\",radius:5,lineWidth:3}},{value:\"GPU利用率\",marker:{symbol:\"hyphen\",stroke:\"#1581E6\",radius:5,lineWidth:3}},{value:\"温度\",marker:{symbol:\"hyphen\",stroke:\"#fad248\",radius:5,lineWidth:3}}],onClick:function onClick(ev){var item=ev.item;var value=item.value;var checked=ev.checked;// const geoms = chartIns.getAllGeoms();\nvar geoms=_this2.state.chartIns.getAllGeoms();for(var i=0;i<geoms.length;i++){var geom=geoms[i];// if (geom.getYScale().field === value) {\n//     if (checked) {\n//         geom.show();\n//     } else {\n//         geom.hide();\n//     }\n// }\nif(geom.getYScale().alias===value){if(checked){geom.show();}else{geom.hide();}}}}}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Axis\"],{name:\"gpu_value\",label:{offset:0,formatter:function formatter(val){return Math.round(val/1024)+\"GiB\";}}// visible={false}\n}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Axis\"],{name:\"temperature\",label:{offset:1,formatter:function formatter(text,item,index){return text+\"\\u2103\";}}// visible={false}\n}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Axis\"],{name:\"GPU_use_percent\",visible:false}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Axis\"],{name:\"value\"// label={{\n//     formatter: function(val) {\n//         return Math.round(val / 1024) + \"GiB\";\n//     }\n// }}\n,visible:false}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Tooltip\"],null),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Geom\"],{type:\"line\",position:\"timestamp*gpu_value\",color:\"#FA4E21\",size:3,tooltip:[\"温度*gpu_value\",function(age,value){return{name:'平均显存',value:value+\"Mib\"};}]}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Geom\"],{type:\"line\",position:\"timestamp*temperature\",color:\"#fad248\",size:3,tooltip:[\"温度*temperature\",function(age,value){return{name:'温度',value:value+\"\\u2103\"};}]}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Geom\"],{type:\"line\",position:\"timestamp*GPU_use_percent\",color:\"#1581E6\",size:3,tooltip:[\"温度*GPU_use_percent\",function(age,value){return{name:'GPU 占用率',value:value+\"%\"};}]}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_bizcharts__[\"Geom\"],{type:\"intervalStack\",position:\"timestamp*value\",color:[\"gpu\",// chart_color\n['transparent']],tooltip:[\"gpu*value\",function(age,value){return{name:age+\"\\u5361\",value:value+\" \"};}]// style={{\n//     stroke: \"#fff\",\n//     lineWidth: 1\n// }}\n})));}}]);return Student_Chart_server;}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);/* harmony default export */ __webpack_exports__[\"default\"] = (Student_Chart_server);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/16.9572840f.chunk.js","import React from \"react\";\nimport {\n    G2,\n    Chart,\n    Geom,\n    Axis,\n    Tooltip,\n    Coord,\n    Label,\n    Legend,\n    View,\n    Guide,\n    Shape,\n    Facet,\n    Util\n} from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport { chart_color } from './chart_config'\n\n// let chartIns = null;\n//\n// const getG2Instance = (chart) => {\n//     chartIns = chart;\n// };\n\nclass Student_Chart_server extends React.Component {\n    // 构造\n    constructor(props) {\n        super(props);\n        // 初始状态\n        this.state = {\n            // fields : [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],\n            fields : [],\n            chart_data:[],\n            max_gpu: 12196,\n            chartIns:null\n        };\n\n\n    }\n\n\n    componentWillMount() {\n        let { data, cols, x_name, y_name , fields} = this.props\n        data = data || []\n        cols = cols || {}\n        fields = fields || [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]\n        this.setState({\n            data,\n            cols,\n            fields\n        })\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        let { data, cols, fields } = nextProps\n        console.log(data)\n        data = data || []\n        cols = cols || {}\n        fields = fields || [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]\n        this.setState({\n            data,\n            cols,\n            fields\n        })\n    }\n\n    render() {\n\n        const data = [\n            {\n                timestamp:\"12-13\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },\n            {\n                timestamp:\"12-14\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },{\n                timestamp:\"12-15\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },{\n                timestamp:\"12-16\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },{\n                timestamp:\"12-17\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },{\n                timestamp:\"12-18\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },{\n                timestamp:\"12-19\",\n                0:1000,\n                1:1000,\n                2:1000,\n                3:1000,\n                temperature:50\n            },\n        ];\n\n        let cols = {\n            // value: {\n            //     tickInterval: 1000000\n            // }\n            temperature: {\n                type: 'linear',\n                min: 0,\n            },\n            value:{\n                alias:'显存占用',\n                min: 0,\n                max: this.state.max_gpu\n            }\n        };\n\n        let dataSource = this.state.data || data\n        const ds = new DataSet();\n        const dv = ds.createView().source(dataSource);\n        dv.transform({\n            type: \"fold\",\n            fields: this.state.fields,\n            key: \"gpu\",\n            value: \"value\",\n        });\n\n        // let chartIns = null;\n        return (\n            <div >\n                <Chart height={400}  data={dv} scale={this.state.cols} forceFit\n                       onGetG2Instance={chart => {\n                           // chartIns = chart;\n                           // console.log(chartIns)\n                           this.setState({\n                               chartIns:chart\n                           })\n                       }}\n                >\n                    <Legend\n                        custom={true}\n                        allowAllCanceled={true}\n                        items={[\n                            {\n                                value: \"平均显存占用\",\n                                marker: {\n                                    symbol: \"hyphen\",\n                                    stroke: \"#FA4E21\",\n                                    radius: 5,\n                                    lineWidth: 3\n                                }\n                            },\n                            {\n                                value: \"GPU利用率\",\n                                marker: {\n                                    symbol: \"hyphen\",\n                                    stroke: \"#1581E6\",\n                                    radius: 5,\n                                    lineWidth: 3\n                                }\n                            },\n                            {\n                                value: \"温度\",\n                                marker: {\n                                    symbol: \"hyphen\",\n                                    stroke: \"#fad248\",\n                                    radius: 5,\n                                    lineWidth: 3\n                                }\n                            },\n                        ]}\n\n                        onClick={ev => {\n                            const item = ev.item;\n                            const value = item.value;\n                            const checked = ev.checked;\n                            // const geoms = chartIns.getAllGeoms();\n                            const geoms = this.state.chartIns.getAllGeoms();\n\n                            for (let i = 0; i < geoms.length; i++) {\n                                const geom = geoms[i];\n\n                                // if (geom.getYScale().field === value) {\n                                //     if (checked) {\n                                //         geom.show();\n                                //     } else {\n                                //         geom.hide();\n                                //     }\n                                // }\n                                if (geom.getYScale().alias === value) {\n                                    if (checked) {\n                                        geom.show();\n                                    } else {\n                                        geom.hide();\n                                    }\n                                }\n                            }\n                        }}\n                    />\n                    {/*<Legend />*/}\n                    {/*<Axis*/}\n                    {/*    name=\"value\"*/}\n                    {/*    label={{*/}\n                    {/*        formatter: function(val) {*/}\n                    {/*            return Math.round(val / 1024) + \"GiB\";*/}\n                    {/*        }*/}\n                    {/*    }}*/}\n                    {/*/>*/}\n                    <Axis\n                        name=\"gpu_value\"\n                        label={{\n                            offset:0,\n                            formatter: function(val) {\n                                return Math.round(val / 1024) + \"GiB\";\n                            }\n                        }}\n                        // visible={false}\n                    />\n                    <Axis\n                        name=\"temperature\"\n                        label={{\n                            offset:1,\n                            formatter(text, item, index) {\n                                return `${text}℃`;\n                            },\n                        }}\n                        // visible={false}\n                    />\n                    <Axis\n                        name=\"GPU_use_percent\"\n                        visible={false}\n                    />\n                    <Axis\n                        name=\"value\"\n                        // label={{\n                        //     formatter: function(val) {\n                        //         return Math.round(val / 1024) + \"GiB\";\n                        //     }\n                        // }}\n                        visible={false}\n                    />\n                    <Tooltip />\n                    <Geom type=\"line\" position=\"timestamp*gpu_value\" color=\"#FA4E21\" size={3}\n                          tooltip={[\n                              \"温度*gpu_value\",\n                              (age, value) => {\n                                  return {\n                                      name: '平均显存',\n                                      value: `${value}Mib`\n                                  };\n                              }\n                          ]}/>\n                    <Geom type=\"line\" position=\"timestamp*temperature\" color=\"#fad248\" size={3}\n                          tooltip={[\n                              \"温度*temperature\",\n                              (age, value) => {\n                                  return {\n                                      name: '温度',\n                                      value: `${value}℃`\n                                  };\n                              }\n                          ]}/>\n                    <Geom type=\"line\" position=\"timestamp*GPU_use_percent\" color=\"#1581E6\" size={3}\n                          tooltip={[\n                              \"温度*GPU_use_percent\",\n                              (age, value) => {\n                                  return {\n                                      name: 'GPU 占用率',\n                                      value: `${value}%`\n                                  };\n                              },\n                          ]}\n                    />\n                    <Geom\n                        type=\"intervalStack\"\n                        position=\"timestamp*value\"\n\n                        color={[\n                            \"gpu\",\n                            // chart_color\n                            ['transparent']\n                        ]}\n                        tooltip={[\n                            \"gpu*value\",\n                            (age, value) => {\n                                return {\n                                    name: `${age}卡`,\n                                    value: `${value} `\n                                };\n                            }\n                        ]}\n\n                        // style={{\n                        //     stroke: \"#fff\",\n                        //     lineWidth: 1\n                        // }}\n                    />\n                </Chart>\n            </div>\n        );\n    }\n}\n\nexport default Student_Chart_server\n\n\n// WEBPACK FOOTER //\n// ./src/components/Charts/Student_Chart_server.js"],"sourceRoot":""}